---
title: "Reproducible Research: Peer Assessment 1"
author: "Thomas Lizzi"
date: "`r Sys.Date()`"
output: 
  html_document:
    keep_md: true
---
## Introduction

This is an R Markdown document, created for the Coursera course "Reproducible Research", in completion of "Peer Assessment 1". The assignment requires students to write an R markdown document evidencing literate programming, using markdown and R programming techniques. There are 5 primary questions to be answered, dealing with processing and analysing data. The data provided to be worked upon, is called "activity monitoring data".

### The Data

The data provided for use, is derived from a study whereupon a single individual wore a "personal activity monitoring device". The study says that:

> "[Activity monitoring devices] are part of the “quantified self” movement – a group of enthusiasts who take measurements about themselves regularly to improve their health, to find patterns in their behavior, or because they are tech geeks. But these data remain under-utilized both because the raw data are hard to obtain and there is a lack of statistical methods and software for processing and interpreting the data."

The device used in this particular data set collects data on the number of steps taken by an individual, in 5 minute intervals. Two months of data, October/November 2012 are included within the data set. The variables measured include steps (the number of steps taken), date (the day on which the steps measurement was taken) and interval, (the interval in which the steps measurement was taken.) The data is stored in csv format, with 17,598 observations and the aforementioned 3 variables recorded.

## Completing the Assignment

### Question 1: Loading and preprocessing the data

To do the analysis and transform the data we need Lubridate, ggplot2, dplyr, knitr and rmarkdown. The following function checks if the packages are there.

```r

check_and_install <- function(package) {
  # Check if the package is already installed
  if (!require(package, character.only = TRUE)) {
    # If not installed, install the package
    install.packages(package, dependencies = TRUE)
    # Load the package after installation
    library(package, character.only = TRUE)
  }
}

check_and_install("lubridate") #For better date handling
check_and_install("ggplot2") # For plotting
check_and_install("dplyr") # For data manipulation
check_and_install("knitr")
check_and_install("rmarkdown")
```r

The following code downloads and reads the data:

```r
# Set the URL for the file
url <- "https://d396qusza40orc.cloudfront.net/repdata%2Fdata%2Factivity.zip"

# Download the file to your working directory
download.file(url, destfile = "data.zip")

# Unzip or read the file as needed
unzip("data.zip", exdir = "data")

# Read the CSV file
data <- read.csv("data/activity.csv")
```r

Now the data are ready for the analysis.


### Question 2 What is mean total number of steps taken per day?

The question states any missing values in the data set can be ignored. From using the summary functions previously, it is already known that there are NA values within the steps variable, so these can be removed now.


# Convert the 'date' column to Date type
data$date <- as.Date(data$date)

# Aggregate the steps by date
daily_steps <- data %>%
  group_by(date) %>%
  summarise(total_steps = sum(steps, na.rm = TRUE))
# Plot the histogram of total steps per day
ggplot(daily_steps, aes(x = total_steps)) +
  geom_histogram(binwidth = 1000, fill = "blue", color = "black") +
  labs(title = "Histogram of Daily Steps",
       x = "Total Steps per Day",
       y = "Frequency") +
  theme_minimal()

# Calculate mean and median of total steps per day
mean_steps <- mean(daily_steps$total_steps, na.rm = TRUE)
median_steps <- median(daily_steps$total_steps, na.rm = TRUE)

# Report the results
cat("Mean total number of steps per day:", mean_steps, "\n")
cat("Median total number of steps per day:", median_steps, "\n")

### Question 3: What is the average daily activity pattern?

To look at the average daily pattern, we can use another exploratory graph, this time a time series plot. As this plot should look at the average number of steps taken for each interval, (utilising all days), the aggregate function must be used again, to split the data into groups for each interval, and then averaged with the mean function.

# Calculate the average number of steps for each 5-minute interval across all days
average_steps <- data %>%
  group_by(interval) %>%
  summarise(average_steps = mean(steps, na.rm = TRUE))  # Exclude NAs

plot(average_steps$time, average_steps$average_steps, 
     type = "l",  # Line plot
     xlab = "Time of Day", 
     ylab = "Average Number of Steps", 
     main = "Average Number of Steps per 5-Minute Interval",
     xaxt = "n")  # Suppress default x-axis labels

# Add custom x-axis labels to show time of day
axis(1, at = seq(min(average_steps$time), max(average_steps$time), by = "1 hour"), 
     labels = format(seq(min(average_steps$time), max(average_steps$time), by = "1 hour"), "%H:%M"))

# Find the interval with the maximum average steps
max_interval <- interval_steps %>%
  filter(avg_steps == max(avg_steps)) %>%
  pull(interval)
# Print the interval with the maximum average steps
cat("The 5-minute interval with the maximum average number of steps is:", max_interval, "\n")

## Imputing missing values
# Calculate the total number of missing values (NAs) in the dataset
total_missing_values <- sum(is.na(data))

# Print the total number of missing values
cat("Total number of missing values in the dataset:", total_missing_values, "\n")

# Duplicate the dataset
data_filled <- data

# Calculate the average number of steps for each 5-minute interval across all days
interval_avg <- data %>%
  group_by(interval) %>%
  summarise(avg_steps = mean(steps, na.rm = TRUE))  # Calculate average excluding NAs

# Fill NAs in the duplicated dataset with the interval averages
data_filled <- data_filled %>%
  left_join(interval_avg, by = "interval") %>%  # Join the average steps by interval
  mutate(steps = ifelse(is.na(steps), avg_steps, steps)) %>%  # Replace NAs with interval average
  select(-avg_steps)  # Remove the temporary avg_steps column

# Check if the NAs are filled
sum(is.na(data_filled$steps))  # This should return 0 if all NAs were filled
# Calculate the total number of steps taken per day
total_steps_per_day <- data_filled %>%
  group_by(date) %>%
  summarise(total_steps = sum(steps))

# Plot the histogram
hist(total_steps_per_day$total_steps, 
     breaks = 20,  # Number of bins
     col = "blue", 
     xlab = "Total Steps Per Day", 
     main = "Histogram of Total Steps Per Day",
     border = "black")

# Calculate the total number of steps taken per day
total_steps_per_day <- data_filled %>%
  group_by(date) %>%
  summarise(total_steps = sum(steps))

# Calculate the mean and median of the total steps per day
mean_total_steps <- mean(total_steps_per_day$total_steps)
median_total_steps <- median(total_steps_per_day$total_steps)

# Report the results
cat("Mean total number of steps per day, after filling NAs:", mean_total_steps, "\n")
cat("Median total number of steps per day, after filling NAs:", median_total_steps, "\n")

## Are there differences in activity patterns between weekdays and weekends?
# Set locale to English
Sys.setlocale("LC_TIME", "C")

# Create the 'day_type' variable using English day names
data <- data %>%
  mutate(day_of_week = weekdays(date),  # Get the day of the week in English
         day_type = ifelse(day_of_week %in% c("Saturday", "Sunday"), 
                            "weekend", "weekday"))
# Ensure 'day_type' is a factor with levels "weekday" and "weekend"
data$day_type <- factor(data$day_type, levels = c("weekday", "weekend"))

# Fill NAs in the dataset with the interval averages
interval_avg <- data %>%
  group_by(interval) %>%
  summarise(avg_steps = mean(steps, na.rm = TRUE))

data_filled <- data %>%
  left_join(interval_avg, by = "interval") %>%
  mutate(steps = ifelse(is.na(steps), avg_steps, steps)) %>%
  select(-avg_steps)

# Calculate the average number of steps for each 5-minute interval by day_type
average_steps <- data_filled %>%
  group_by(interval, day_type) %>%
  summarise(average_steps = mean(steps, na.rm = TRUE))

# Convert the interval to a time of day format for better x-axis labeling
average_steps$time <- sprintf("%04d", as.numeric(average_steps$interval))
average_steps$time <- as.POSIXct(average_steps$time, format="%H%M", tz="UTC")
# Create the panel plot using ggplot2
ggplot(average_steps, aes(x = time, y = average_steps, group = 1)) +
  geom_line() +
  facet_wrap(~ day_type, ncol = 1, scales = "free_y") +  # Separate panels for weekday and weekend
  labs(x = "Time of Day", y = "Average Number of Steps",
       title = "Average Number of Steps per 5-Minute Interval: Weekday vs Weekend") +
  scale_x_datetime(date_labels = "%H:%M", date_breaks = "2 hours") +
  theme_minimal()